openapi: 3.0.0

info:
  title: m-server # Note. title is your API name
  description: simple testing swagger
  version: 0.0.1 # Note. an arbitrary string that specifies the version of your own API

servers: # Note. API server and base URL
  - url: http://localhost:3000
    description: local server

security: # apply 1 only aothorization globally
  - ApiKeyAuth: []


paths:
  /:
    get:
      security: []  # common API no authentication
      tags:
        - commom
      summary: common tool api
      parameters:
        - name: api
          in: query
          description: sub api
          schema:
            type : string
      responses:
        200:
          description: ok
          content:
            text/plain:
              schema:
                type: string
                example: ok
    
          
  /login:
    post:
      security: []  # login do not need authentication
      tags:
        - login
      summary: login & acquire apikey from server
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginIn" # <-------
      responses:
        200:
          $ref: '#/components/responses/ResLogin'
          
  /user:
    get:
      tags:
        - user
      summary: return user info
      responses:
        200:
          $ref: '#/components/responses/ResUserGet'
          
    post:
      tags:
        - user
      summary: Creates a new user.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserIn" # <-------
      responses:
        200:
          $ref: '#/components/responses/ResError'

components:
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: token

  schemas: # global schemas here
    LoginIn:
      type: object
      properties:
        openId:
          type: string
          pattern: '^[A-Za-z0-9-]+$'
          example: "123e4567-e89b-12d3-a456-426614174000"
        platform:
          type: string
          enum:
            - 'android'
            - 'iphone'
          example: "iphone"
        channelId:
          type: integer
          enum: [0, 1, 2]
          description: 0 for dev, 1 for wchat, 2 for qq
      required:
        - openId
        - platform
    LoginOut:
      type: object
      properties:
        token:  # apikey
          type: string
      required:
        - token
        
    UserIn:
      type: object
      properties:
        id:
          type: integer
          format: int64
          minimum: 10
          example: 10
        name:
          type: string
          pattern: '^[A-Za-z0-9-_]+$'
          example: Arthur-Dent
      required:
        - id
        - name
    UserOut:
      $ref: '#/components/schemas/UserIn'
    
    ErrorCode:
      properties:
        errcode:
          type: integer
          format: int32
        errmsg:
          type: string
      required:
        - errcode
  
  # requestBodies: # global request body components
    
  responses: # global response components
    ResError:
      description: errcode - 0 if successful.
                   otherwise means error happen.
      content:
        application/json:          
          schema:
            $ref: '#/components/schemas/ErrorCode'
    ResUserGet:
      description: get user profile
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/ErrorCode'
              - type: object
                properties:
                  data: # insert `UserOut` to `ErrorCode` struct as a key-value pair
                    $ref: "#/components/schemas/UserOut"
    ResLogin:
      description: acquire token
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/ErrorCode'
              - type: object
                properties:
                  data: 
                    $ref: '#/components/schemas/LoginOut'


            
