// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9RWX2/bNhD/KsStb5Ns2XHdVW9ZNxTFBnTYsJd52sBKZ4mtRDLHUzIv0HcfjpKdOHaQ",
	"dcjD+kaL0o+/P3c830LpOu8sWg6Q3wJh8M4GjD9+xvA9kSNZl84yWpal9r41pWbj7PxjcFaehbLBTsvq",
	"BeEWcvhqfgc8H3fDPKK9cRXCMAwJVBhKMl6AIAckKl2FKlWZMlsV+rLEELZ9O1OOG6QbE1B1qG1QKDiq",
	"0d6jncGQCNMfXW3sZzHVbft+C/nmX3NObsGT80hsRoMqzU9qjrze9wyimHceIQf34SOWDENxxgZdXvWG",
	"ULH7hHbS9mtAeov8P1QnzD5DXI2s+oCkPLmtaTF+N2HJUXd08odspvKQ5dZRpxlyMJYvlnA42VjGGklM",
	"Q6Iu1PLytBeYjK3jeYTR4QryzQG1GBKISb2zp0eXjbYW23dVdOVIUKa2jlSF14laxOVN2WhO1DL+uLqC",
	"BND2HeSbLFkky+IcV+fRjtj4l+58K9uL5QWuXq5fpfjN6w/pYlldpHr1cp2uluv1YrV4tcqyDBLwmhlJ",
	"iPyxuUx/0+nfWfo6Lb5+cWfKXngCvtUs1sWTRlKgbUXOVJCA8Y2zCEVyj8X0LHnCxEnAvROKk2qY7JVa",
	"OfF3LPUnsxpfOwctVXguOHPs6iJLjmpnvYIEOmNNJ2bI7mk4Vnd4HM0lcdNT+p104WMJ/Hk2ggd6ou0R",
	"/zFNZ936ckVJr2PZk+HdL9Lzo55Lb37A3WXPTVQnpzaoK6Q9UD4lf8DT8Ytxhhi7dadtGYzoUoyBja1V",
	"uNF1HQHZcNTbpQHpOj66RgpTM8+y2WLfkdobyOFils2mRmsi23m7nzPehZiOZBMvYelh+MkFHkfR6AsG",
	"/tZVu2cboftLajg2nqnH+ODe+F5m2WNoh/fmh8l5Px3IN0UCoe86TTvIIWpWv/dZtlyr/YDS3nzCndqS",
	"69TBTNZ1kDIYXSoEdC4XvhCp8Yxfb5Gl0uE/ct9Pxsj+wJeQe7LjpIkFckcskpHb/vH4DnyeP73ponrG",
	"8MY/aMfy3xBqxqC0sngTXZidOvAg7+M+3BSDFEBMNcTd4/5qXanbu9R7aqVrmX0+n8e9xgXOL2RIDcXw",
	"TwAAAP//9fqRTWUKAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
