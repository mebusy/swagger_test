// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/6xUT2/UPhD9Ktb8evtlN2mLkMhtKQghDiAQF1YLMskkcUlsd2bcslT57sjOdnejtuKP",
	"uDkZ+817b559C5UbvLNohaG8BUL2zjKmj/fIL4kcXbga43flrKCVuNTe96bSYpzNL9nZ+I+rDgcdVyeE",
	"DZTwX34Az6cq5wfEcRwzqJErMj4CQQlIVLka1UIVyjSKQ1UhcxP6pXLSId0YRjWgtqww4qhOe492CWMW",
	"2b5C+chIf8RV9/3bBsr1b7PObsGT80hiJptqLb9UnWhFvbL1CCW4r5dYCYybB0xoUVRgJOXJNabHdG4H",
	"FPvMZjKnsvMvLhtHgxYowVg5P4N9Z2MF20gmi7sHbuPmXY2FjG1TP8KrYAhrKNd71M2YwZ2/876mTt2/",
	"68H3COVpkc36P30CGQzGmiEMU/U+GasHnIHAiqQLtHgRx5iB1yJI0Z/P69Xik178KBbPFl82/58ctD3C",
	"39Sww9/cG0C0FqtARrYfosWTnpU3b3C7CtIldbFrh7pGugMqQdw3tIfWOp2YMm1s41IwZmNlE3UpQRZj",
	"W8U3um0ToBhJeocFI12nX9dIPJ0qlsXyNPrjPFrtDZRwviyWxeRIl9jmYTeUFlPg42RS3F/XUMLdpcjm",
	"l/usKB4L7X5ffnSnklNhGDRtoQRCCWSnmCa5GYhuObqdyMSoeMcP0Hnn+MDnKiDLc1dv/9nzsuM6S4BQ",
	"wPEv5R8/V8cGXBBqQVZaWbxJPizve3CcrvTEHOdqvRk3sRxHzqk6z0vvKt2rfSQC9TGFIr7M81TrHEt5",
	"XhRFfEZ+BgAA///sEyOqyQUAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
