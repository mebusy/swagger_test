// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8RWYY/jNBD9K9Zw33CaNO31uHxbDnRCIIFAfKEE5Esmie8S22tPtpRV/juyk6YN7cKB",
	"Vrpvrp08v/fmzaSPUOjOaIWKHGSPYNEZrRyGHz+i+9pabf260IpQkV8KY1pZCJJaxe+dVn7PFQ12wq9e",
	"WKwgg8/iM3A8nro4oL3RJcIwDBxKdIWVxgNBBmhtoUtkEUuYrJjriwKdq/p2xTQ1aA/SIetQKMfQ47BG",
	"GINqBQP3TL/TtVT/ialo2+8ryPYfzZk/grHaoCU5GlQKCkjLXdIfMFxFR4OQgSMrVQ1e8bSj373Hgm7t",
	"5DeMEcV9Ly2yEXdU+7ND+xbpE+n9p/c9s49VViOx3qFlxupKthjem4D8PWcuVyZPafHLSttOEGQgFW1S",
	"mG+WirD2ZLh/unP17ZpYDPaWkO1n1HzgMAdqeXHRCKWw/aYMhizkJKzSlpX4wNk6LA9FI4izNPy4vwcO",
	"qPoOsn3C1zzNbzHVBtWIjX+IzrT+eJ1ucPty9yrCL16/i9ZpuYnE9uUu2qa73Xq7frVNkgQ4GEGE1hP5",
	"bX8X/SKiP5PodZR//uJsyUk2B9MK8saFm0ZSIFRptSyBgzSNVgg5v2Ax7fF/sXAScHFDfpUFDiElV97K",
	"pfB1whfF3W2BQyeV7Dxff3rtnxIdLt27s9T0NvrK98hTJv1+06W/KQvOBPz8Vic7LHor6fiTz++o587I",
	"b/F411MT1PlbGxQl2hNQNg2LGU+EN8bxKFWlr0PmpNfFCB1JVTN3EHUdAElS0NtFDu1D2HpA66ZorpLV",
	"+pQvYSRksFklqyk2TWAbt3PitQvzxNcmTBOfSPhBOxqbYvQFHX2py+OzfR1G7GFpO9kew8bFdylNkqew",
	"5ufi+ZMQatN3nbBHyCBoZL/2SZLu2GmyCiM/4JFVVndsNo9E7XzZR1dyDxP3U2xrvOHPW6QQ6//J9jTS",
	"l3wtUm/VOCVDIM7EAhk/qZ4u18zn+as1zflnK9b4T2Mp/o1FQeiYYAoPwYPVtf7L3gtft8uu2+dD7o99",
	"TV04XXZTqwvRnmve29b3KJHJ4jicNdpRtvEDdsiHvwIAAP//SchCFy4JAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
