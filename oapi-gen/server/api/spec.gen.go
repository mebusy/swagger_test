// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9RWTY/bNhP+K8S8ub2SLXsdp9FtmxZB0AIpWvTSrVow0lhiIpHc4Wi37kL/vRhK/oq9",
	"2KbYQ3ujSGnm+Zjh6AFK13ln0XKA/AEIg3c2YHz4EcO3RI5kXTrLaFmW2vvWlJqNs/OPwVnZC2WDnZbV",
	"C8IN5PC/+SHwfDwN8xjtjasQhmFIoMJQkvESCHJAotJVqFKVKbNRoS9LDGHTtzPluEG6NwFVh9oGhRJH",
	"Ndp7tDMYEkH6vauN/SKkum3fbyC/+duYkwfw5DwSm1GgSvOTnCOu9z2DMOatR8jBffiIJcNQXJBBl7e9",
	"IVTsPqGduP0ckN4i/wvZCbIvIFcjqz4gKU9uY1qM302xJNUBTv45mqk8ZLlx1GmGHIzlqyXsMxvLWCOJ",
	"aEjUhVpens4Ck7F1zEcYFa4gv9lHLYYEolPv7HnqstHWYvuuiqqcEMrUxpGq8C5Ri7i8LxvNiVrGh9tb",
	"SABt30F+kyWLZFlcwuo82jE2/qE738rxYnmFq5frVyl+9fpDulhWV6levVynq+V6vVgtXq2yLIMEvGZG",
	"EiC/3Vynv+j0zyx9nRb/f3EQZUc8Ad9qFuliphEUaFuRMxUkYHzjLEKRHKGY9pInRJwIHGUozqphkldq",
	"5UzfsdSf9Gp87VJoqcJLxplTVRdZclI76xUk0BlrOhFDTs/NsbrDU2uuiZue0m+kCx9z4PeLFnzGJ8oe",
	"4z/G6aJa/11S0utY9mR4+5P0/Mjn2pvvcHvdcxPZSdYGdYW0C5RPzu/j6fjFOEOM3bjztgxGeCnGwMbW",
	"Ktzruo4B2XDk26UB6S5u3SGFqZln2Wyx60jtDeRwNctmU6M1Ee283c0Z70J0R7yJl7D0MPzgAo+jaNQF",
	"A3/tqu2zjdDdJTWcCs/UY9w4Gt/LLHss2v69+X5yRnf6rtO0hRwiS/Vrn2XLtdqNJO3NJ9yqDblO7eVj",
	"XQcxftSlkDBzueIldY0XFHqLLLUN/xDtbhae4iXknuw4W2JJHIBFMHK/P27YHs/z+zVdTc9o1/hLdkr/",
	"DaFmDEori/dRhdm5Asf9F38MjjvvphgKORZXQzw97ajWlbo9uN5TK33K7PP5PJ41LnB+JWNpKIa/AgAA",
	"///tN8imVwoAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
